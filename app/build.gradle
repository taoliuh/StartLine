apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion build_version.compileSdkVersion
    defaultConfig {
        applicationId "me.sonaive.startline"
        minSdkVersion build_version.minSdkVersion
        targetSdkVersion build_version.targetSdkVersion
        versionCode gitRevision()
        versionName build_version.versionName
    }
    signingConfigs {
        release {
            keyAlias "slice"
            keyPassword "200210"
            storeFile file('slice')
            storePassword "200210"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def buildType = variant.variantData.variantConfiguration.buildType.name
            outputFileName = "startline-" + buildType + "-v" + defaultConfig.versionName + "-" + defaultConfig.versionCode + ".apk"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':lab')
    implementation libs.fragment

    debugImplementation libs.leak_canary_debug
    releaseImplementation libs.leak_canary_release
}

def static gitRevision() {
    def cmd = 'git rev-list --all --count'
    def codes = cmd.execute().text.trim()
    if (codes == "" || codes == null) {
        return 99999
    }
    def code = cmd.execute().text.trim().toInteger()
    return code
}

//获取当前分支名称
def static gitCurrentBranchName() {
    def cmd = 'git symbolic-ref --short -q HEAD'
    def branchName = cmd.execute().text.trim()
    return branchName
}

//获取当前分支上最近一次提交 id
def static gitCurrentBranchLastCommitId() {
    def cmd = 'git rev-parse HEAD'
    def commitIds = cmd.execute().text
    if (commitIds == null || commitIds == "") {
        return "unknow-commitId"
    }
    def commitId = cmd.execute().text.trim().substring(0, 7)

    return commitId
}

task getVerCode {
    println("ver code = " + gitRevision() + "; branchName = " + gitCurrentBranchName()
            + "; lastCommitId = " + gitCurrentBranchLastCommitId())
}